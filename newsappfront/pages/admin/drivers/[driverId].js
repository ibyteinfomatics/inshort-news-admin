import Link from "next/link";
import React, { useEffect, useState } from "react";
import { userService } from "../../../services";
import {
  Backdrop,
  Box,
  Modal,
  Table,
  TableCell,
  TableRow,
} from "@mui/material";
import { styled } from "@mui/material/styles";
import { tableCellClasses } from "@mui/material/TableCell";
import Head from "next/head";
import SideBar from "../../../components/side-bar/SideBar";
import DashboardHeader from "../../../components/header/DashboardHeader";
import { useRouter } from "next/router";
import { useDispatch, useSelector } from "react-redux";
import { setDriverDetail } from "../../../reducers/users-reducer";
import DriverOuth from "../../../components/customer/DriverOuth";
import { Tab, Tabs, TabList, TabPanel } from "react-tabs";
import "react-tabs/style/react-tabs.css";
import moment from "moment";
import JobDetail from "../../../components/job/JobDetail";
import Invoice from "../../../components/invoice/InvoiceDetail";

const driverProfile = () => {
  const [status, setStatus] = useState();
  const [open, setOpen] = React.useState(false);
  const [open1, setOpen1] = React.useState(false);
  const [verified, setVerified] = useState(false);
  const [Driverstatus,setDriverStatus]=useState(0)
  const [token, setToken] = useState();
  const [updateDriverProfile,SetUpdateDriverProfile]=useState(false)
  const [name,setName]=useState()
  const [email,setEmail]=useState()
  const [phone,setPhone]=useState()
  const [registration,setRegistration]=useState()
  const [modalNo,setModalNO]=useState()
  const [sortCode,setSortCode]=useState()
  const [accountNo,setAccountNo]=useState()
  const [cardName,setCardName]=useState()

  const router = useRouter();
  const id = router?.query?.driverId;
  const dispatch = useDispatch();
  const { driverDetail } = useSelector((state) => state.users);

  useEffect(() => {
    getSingleDriverDetail(id);
    setToken(localStorage.getItem("token"));
  }, [id]);


  const getSingleDriverDetail = async (id) => {
    const res = await userService.getSingleDriver(id);
    if (res.success) {
      setVerified(res?.driver?.verify_by_admin);
      setDriverStatus(res?.driver?.status_by_admin)
      await dispatch(setDriverDetail(res));
    } else {
      console.log(res.msg);
    }
  };

  const handleOpen = () => {
    // if (verified) return;
    setOpen(true);
    setStatus("approve");
  };
  const handleOpen1 = () => {
    setOpen(true);
    setStatus("reject");
  };

  const handleClose = () => {
    setOpen(false);
    setOpen1(false);
  };
  
  const updateDetail=()=>{
    setName(driverDetail?.driver?.first_name )
    setEmail(driverDetail?.driver?.email)
    setPhone(driverDetail?.driver?.phone_number);
    setRegistration(driverDetail?.driver?.vehicle
      ?.registration_number);
    setModalNO(driverDetail?.driver?.vehicle?.model);
    setSortCode(driverDetail?.driver?.bank_details?.sort_code);
    setAccountNo(driverDetail?.driver?.bank_details
      ?.account_number );
      setCardName(driverDetail?.driver?.bank_details
        ?.name_on_card);
  }

  const handleInputChange = (event) => {
    const { name, value } = event.target;  
    console.log(name,"name")
    switch (name) {
      case 'name':
        setName(value);
        break;
      case 'email':
        setEmail(value);
        break;
      case 'mob':
        setPhone(value);
        break;
      case 'registration':
        setRegistration(value);
        break;
      case 'modal_no':
        setModalNO(value);
        break;
      case 'sort':
        setSortCode(value);
        break;
      case 'account_no':
        setAccountNo(value);
        break;
      case 'card_name':
        setCardName(value);
        break;
      default:
        break;
    }
  };
  // const notGiven = <span className="label label-roles ">Not Provided</span>;
  const notGiven = <span className=''>Not Provided</span>;

console.log(name,email,"name")

  return (
    <>
      <Head>
        <title>Driver Detail</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.png' />
      </Head>
      <SideBar />
      <div className='dashboard sideBarOpen'>
        <DashboardHeader />
        <div className='contentWrapper'>
          <div className='dashboard_content innerPage'>
            {
              <div className='table--layout'>
                <div className='go-back'>
                  <div className='tableTitle'></div>
                  <div className='flexBox gap-2'>
                    <button
                      className='creatButton approve btn'
                      onClick={handleOpen}
                      disabled={Driverstatus==1||Driverstatus==2&&true}
                    >             
                      {Driverstatus==0||Driverstatus==2?"Approve":"Approved"}
                    </button>

                    <button
                      className='creatButton reject btn'
                      onClick={handleOpen1}
                      disabled={Driverstatus==1||Driverstatus==2&&true}
                    >
                    {Driverstatus==2?"Rejected":"Reject"}
                    </button>

                    <button className='creatButton back btn'>
                      <Link href='/admin/drivers'>Back to List</Link>
                    </button>
                  </div>
                </div>
                {open || open1 ? (
                  <Modal
                    open={open || open1}
                    onClose={handleClose}
                    aria-labelledby='parent-modal-title'
                    aria-describedby='parent-modal-description'
                  >
                    <DriverOuth
                      open={handleClose}
                      status={status}
                      id={id}
                      setDriverStatus={setDriverStatus}
                    />
                  </Modal>
                ) : null}
              </div>
            }
            {
              <div className='tabLayout'>
                <Tabs>
                  <TabList>
                    <Tab>Driver Details</Tab>
                    <Tab>Job Details</Tab>
                    <Tab>Invoice Details</Tab>
                  </TabList>

                  <TabPanel>
                  <button onClick={()=>{SetUpdateDriverProfile(!updateDriverProfile);updateDetail()}} className="btn " style={{alignItem:"right"}}>Edit</button>
                    <div className='tabContent'>
                      <div className='card cardBlock'>
                        <div className='profileBlock'>
                          <div className='profileDetail py-4'>
                            <div className='flexBox gap-4'>
                              <div className='profileImage'>
                                <img src={driverDetail?.driver?.profile?.url ?driverDetail?.driver?.profile?.url:"/images/manager.png"}  alt='Profile' />
                              </div>
                              <div className='nameDetail'>
                                {
                                  updateDriverProfile?<input type="text" value={name} name="name" placeholder="Enter driver name"  onChange={(e)=>handleInputChange(e)}/>:<h4>{`${
                                    driverDetail?.driver?.first_name || ""
                                  } ${
                                    driverDetail?.driver?.last_name || ""
                                  }`}</h4>
                                }
                                <p className='iconText'>
                                  <span className='iconWidth'>
                                    <img src='/images/email.svg' alt='Email' />
                                  </span>
                                 {
                                  updateDriverProfile?<input type="email" value={email} name="email" placeholder="Enter driver email"  onChange={(e)=>handleInputChange(e)}/>:driverDetail?.driver?.email || ""
                                 }
                                  
                                </p>
                                <p className='iconText'>
                                  <span className='iconWidth'>
                                    <img
                                      src='/images/calendar.svg'
                                      alt='Calendar'
                                    />
                                  </span>
                                  {driverDetail?.driver?.date_of_birth
                                    ? moment(
                                        driverDetail?.driver?.date_of_birth
                                      ).format("MMM DD YYYY")
                                    : notGiven}
                                </p>
                              </div>                           
                            </div>
                          </div>
                          <div className='profileProgress'>
                            <div className='page-wrapper'>
                              <header className='header'>
                                <div className='progress-bar'>
                                  <div
                                    className={`step ${
                                      driverDetail?.driver?.is_email_verified &&
                                      "complete"
                                    }`}
                                  >
                                    <span className='icon'></span>
                                    <span className='line'></span>
                                    <span className='label'>Sign In</span>
                                  </div>
                                  <div
                                    className={`step ${
                                      driverDetail?.driver
                                        ?.is_all_profile_completed && "complete"
                                    }`}
                                  >
                                    <span className='icon'></span>
                                    <span className='line'></span>
                                    <span className='label'>
                                      Profile Completion
                                    </span>
                                  </div>
                                  <div
                                    className={`step ${
                                      driverDetail?.driver
                                        ?.registration_payment_status &&
                                      "complete"
                                    }`}
                                  >
                                    <span className='icon'></span>
                                    <span className='line'></span>
                                    <span className='label'>Payment</span>
                                  </div>
                                  <div
                                    className={`step ${
                                      driverDetail?.driver
                                        ?.verify_by_admin &&
                                      "complete"
                                    }`}
                                  >
                                    <span className='icon'></span>
                                    <span className='line'></span>
                                    <span className='label'>Verified</span>
                                  </div>
                                  <div
                                    className={`step ${
                                      driverDetail?.driver
                                        ?.is_on_duty &&
                                      "complete"
                                    }`}
                                  >
                                    <span className='icon'></span>
                                    <span className='line'></span>
                                    <span className='label'>Driver Jobs</span>
                                  </div>
                                </div>
                              </header>
                              <div className='nameDetail'>
                                <p className='iconText'>
                                  <span className='iconWidth'>
                                    <svg
                                      width='18'
                                      height='18'
                                      viewBox='0 0 18 18'
                                      fill='none'
                                    >
                                      <path
                                        d='M9.09895 17.1982C7.97832 16.6674 6.90931 16.0407 5.94351 15.2592C4.52061 14.1165 3.36313 12.7673 2.71435 11.0348C2.41945 10.2459 2.25725 9.42759 2.24988 8.57975C2.24988 6.97991 2.24988 5.38008 2.24988 3.78024C2.24988 3.29366 2.45631 3.00613 2.9134 2.8513C4.9261 2.16566 6.93143 1.48002 8.94412 0.809118C9.1653 0.735393 9.44545 0.72802 9.66663 0.801746C11.6867 1.47264 13.7068 2.15829 15.7195 2.8513C16.1913 3.0135 16.383 3.30103 16.383 3.80973C16.383 5.25474 16.3609 6.69976 16.3904 8.14477C16.4346 10.3049 15.6752 12.1554 14.2745 13.7626C12.9769 15.2445 11.3992 16.3578 9.60765 17.1614C9.58553 17.1687 9.49706 17.213 9.49706 17.213C9.32012 17.2646 9.22428 17.2646 9.09895 17.1982ZM14.621 4.61334C14.6283 4.40691 14.5694 4.30369 14.3629 4.23734C12.741 3.69177 11.1264 3.13883 9.51181 2.60064C9.40122 2.56378 9.25377 2.5564 9.14318 2.59327C7.50648 3.14621 5.87716 3.70652 4.24046 4.25945C4.07826 4.31844 4.01191 4.38479 4.01191 4.56173C4.01928 5.85929 4.01191 7.15685 4.01928 8.45442C4.01928 9.42022 4.26257 10.327 4.72704 11.1749C5.75182 13.0475 7.3664 14.2787 9.19479 15.2666C9.26851 15.3035 9.39385 15.2961 9.46757 15.2592C10.7283 14.5883 11.871 13.77 12.8294 12.701C13.7952 11.6172 14.4809 10.3934 14.5841 8.91888C14.6357 8.16689 14.6062 5.29898 14.621 4.61334Z'
                                        fill='#727788'
                                      />
                                      <path
                                        d='M8.92155 9.67822C9.29755 9.17689 9.65143 8.71242 9.99793 8.24058C10.5951 7.44434 11.1849 6.65549 11.7821 5.85925C12.1286 5.39479 12.6668 5.29894 13.0796 5.60859C13.4851 5.91823 13.5367 6.44905 13.1976 6.90615C12.0549 8.43963 10.9048 9.96574 9.75464 11.4919C9.3639 12.0079 8.79622 12.0448 8.33175 11.5877C7.57238 10.8357 6.82038 10.0837 6.06838 9.32434C5.68501 8.93359 5.67027 8.40277 6.01678 8.04152C6.37803 7.67289 6.9236 7.68764 7.32171 8.07838C7.85991 8.60183 8.37598 9.12528 8.92155 9.67822Z'
                                        fill='#727788'
                                      />
                                    </svg>
                                  </span>
                                  {
                                    updateDriverProfile?<input type="number" value={phone} name="mob" placeholder="Enter driver mobile no."  onChange={(e)=>handleInputChange(e)} />:driverDetail?.driver?.phone_number ||
                                      notGiven
                                  }
                                  
                                </p>
                                <p className='iconText'>
                                  <span className='iconWidth'>
                                    <svg
                                      width='12'
                                      height='16'
                                      viewBox='0 0 12 16'
                                      fill='none'
                                    >
                                      <path
                                        d='M6 3.875C6.49728 3.875 6.97419 4.07254 7.32583 4.42417C7.67746 4.77581 7.875 5.25272 7.875 5.75C7.875 5.99623 7.8265 6.24005 7.73227 6.46753C7.63805 6.69502 7.49994 6.90172 7.32583 7.07583C7.15172 7.24994 6.94502 7.38805 6.71753 7.48227C6.49005 7.5765 6.24623 7.625 6 7.625C5.50272 7.625 5.02581 7.42746 4.67417 7.07583C4.32254 6.72419 4.125 6.24728 4.125 5.75C4.125 5.25272 4.32254 4.77581 4.67417 4.42417C5.02581 4.07254 5.50272 3.875 6 3.875ZM6 0.5C7.39239 0.5 8.72774 1.05312 9.71231 2.03769C10.6969 3.02226 11.25 4.35761 11.25 5.75C11.25 9.6875 6 15.5 6 15.5C6 15.5 0.75 9.6875 0.75 5.75C0.75 4.35761 1.30312 3.02226 2.28769 2.03769C3.27226 1.05312 4.60761 0.5 6 0.5ZM6 2C5.00544 2 4.05161 2.39509 3.34835 3.09835C2.64509 3.80161 2.25 4.75544 2.25 5.75C2.25 6.5 2.25 8 6 13.0325C9.75 8 9.75 6.5 9.75 5.75C9.75 4.75544 9.35491 3.80161 8.65165 3.09835C7.94839 2.39509 6.99456 2 6 2Z'
                                        fill='#727788'
                                      />
                                    </svg>
                                  </span>
                                  {
                                    updateDriverProfile?<input type="text" placeholder="Enter driver address"/>:driverDetail?.driver?.address_line_1
                                    ? `${
                                        driverDetail?.driver?.address_line_1 ||
                                        ""
                                      }${
                                        driverDetail?.driver?.address_line_2
                                          ? `, ${driverDetail?.driver?.address_line_2}`
                                          : ""
                                      }${
                                        driverDetail?.driver?.address_line_3
                                          ? `, ${driverDetail?.driver?.address_line_3}`
                                          : ""
                                      }`
                                    : notGiven
                                  }
                                 
                                </p>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div className='grid2'>
                        <div className='card cardBlock'>
                          <h4>Vehicle</h4>

                          <div className='detailGroup'>
                            <div className='labelLeft'>
                              Registration Number:
                            </div>
                            <div className='lebelData'>
                            {
                              updateDriverProfile?<input type="text" value={registration} name="registration" placeholder="Enter registration no." onChange={(e)=>handleInputChange(e)}/>:driverDetail?.driver?.vehicle
                              ?.registration_number || notGiven
                            }
                            
                            </div>
                          </div>

                          <div className='detailGroup'>
                            <div className='labelLeft'>Model:</div>
                            <div className='lebelData'>
                            {
                              updateDriverProfile?<input type="text" value={modalNo} name="modal_no" placeholder="Enter modal no." onChange={(e)=>handleInputChange(e)} />:driverDetail?.driver?.vehicle?.model || notGiven
                            }
                              
                            </div>
                          </div>
                          <div className='detailGroup'>
                            <div className='labelLeft'>Joined Us:</div>
                            <div className='lebelData'>
                              {driverDetail?.driver?.vehicle?.createdAt
                                ? moment(
                                    driverDetail?.driver?.vehicle?.createdAt
                                  ).format("MMM DD YYYY")
                                : notGiven}
                            </div>
                          </div>
                        </div>
                        <div className='card cardBlock'>
                          <h4>Banking</h4>
                          <div className='detailGroup'>
                            <div className='labelLeft'>Sort Code:</div>
                            <div className='lebelData'>
                            {
                              updateDriverProfile?<input type="text" value={sortCode} name="sort" placeholder="Enter sort code" onChange={(e)=>handleInputChange(e)}/>:driverDetail?.driver?.bank_details?.sort_code ||
                              notGiven
                            }                          
                            </div>
                          </div>
                          <div className='detailGroup'>
                            <div className='labelLeft'>Account No:</div>
                            <div className='lebelData'>
                            {
                              updateDriverProfile?<input type="text" value={accountNo} name="account_no" placeholder="Enter account no." onChange={(e)=>handleInputChange(e)}/>:driverDetail?.driver?.bank_details
                              ?.account_number || notGiven
                            }
                            </div>
                          </div>
                          <div className='detailGroup'>
                            <div className='labelLeft'>Name on Card:</div>
                            <div className='lebelData'>
                            {
                              updateDriverProfile?<input type="text" value={cardName} name="card_name" placeholder="Enter card name" onChange={(e)=>handleInputChange(e)}/>:driverDetail?.driver?.bank_details
                              ?.name_on_card || notGiven
                            }
                             
                            </div>
                          </div>
                        </div>
                      </div>
                      <div className='grid2'>
                        <div className='card cardBlock'>
                          <h4>Proof of Address</h4>
                          <div className='imageBlock'>
                          {
                          updateDriverProfile?
                          <>
                          <input type="file" id="avatar" name="avatar" accept="image/png, image/jpeg" />

                          <label className="btn btn-primary" htmlFor="avatar">Choose a proof of address picture</label>
                          </>
                         :driverDetail?.driver?.documents?.filter(
                            (item) => item.name == "proof_of_address"
                          )?.[0]?.url ? (
                            <img
                              src={
                                driverDetail?.driver?.documents?.filter(
                                  (item) => item.name == "proof_of_address"
                                )?.[0]?.url
                              }
                              alt='Image'
                            />
                          ) : (
                            <h1>No Image found</h1>
                          )}
                          
                            
                          </div>
                        </div>
                        <div className='card cardBlock'>
                          <h4>Insurance Document</h4>
                          <div className='imageBlock'>
                          {
                            updateDriverProfile?
                            <>
                            <input type="file" id="avatar" name="avatar" accept="image/png, image/jpeg" />
  
                            <label className="btn btn-primary" htmlFor="avatar">Choose a insurance picture</label>
                            </>:driverDetail?.driver?.documents?.filter(
                              (item) => item.name == "insurance_document"
                            )?.[0]?.url ? (
                              <img
                                src={
                                  driverDetail?.driver?.documents?.filter(
                                    (item) => item.name == "insurance_document"
                                  )?.[0]?.url
                                }
                                alt='Image'
                              />
                            ) : (
                              <h1>No Image found</h1>
                            )
                          }
                            
                          </div>
                        </div>
                      </div>
                      <div className='grid2'>
                        <div className='card cardBlock'>
                          <h4>Driving License</h4>

                          <div className='detailGroupBlock'>
                            <div className='labelLeft'>Front Pic:</div>
                            <div className='lebelData'>
                              <div className='imageBlock'>
                              {
                                updateDriverProfile?
                                <>
                                <input type="file" id="avatar" name="avatar" accept="image/png, image/jpeg" />
      
                                <label className="btn btn-primary" htmlFor="avatar">Choose a Driver licence</label>
                                </>: driverDetail?.driver?.documents?.filter(
                                  (item) =>
                                    item.name == "driving_license_front_pic"
                                )?.[0]?.url ? (
                                  <img
                                    src={
                                      driverDetail?.driver?.documents?.filter(
                                        (item) =>
                                          item.name ==
                                          "driving_license_front_pic"
                                      )?.[0]?.url
                                    }
                                    alt='Image'
                                  />
                                ) : (
                                  <h1>No Image found</h1>
                                )}                                                    
                              </div>
                            </div>
                          </div>
                        </div>
                        <div className='card cardBlock'>
                          <h4></h4>

                          <div className='detailGroupBlock'>
                            <div className='labelLeft'>Rear Pic:</div>
                            <div className='lebelData'>
                            {
                              updateDriverProfile?
                              <>
                              <input type="file" id="avatar" name="avatar" accept="image/png, image/jpeg" />
    
                              <label className="btn btn-primary" htmlFor="avatar">Choose a Driver licence</label>
                              </>:driverDetail?.driver?.documents?.filter(
                                (item) =>
                                  item.name == "driving_license_rear_pic"
                              )?.[0]?.url ? (
                                <img
                                  src={
                                    driverDetail?.driver?.documents?.filter(
                                      (item) =>
                                        item.name == "driving_license_rear_pic"
                                    )?.[0]?.url
                                  }
                                  alt='Image'
                                />
                              ) : (
                                <h1>No Image found</h1>
                              )
                           }                             
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </TabPanel>
                  <TabPanel>
                    <JobDetail id={id} token={token} />
                  </TabPanel>
                  <TabPanel>
                    <Invoice Id={id}/>
                  </TabPanel>
                </Tabs>
              </div>
            }
          </div>
        </div>
      </div>
    </>
  );
};

export default driverProfile;

const StyledTableCell = styled(TableCell)(({ theme }) => ({
  [`&.${tableCellClasses.head}`]: {
    // backgroundColor: theme.palette.common.black,
    // color: theme.palette.common.white,
    fontWeight: 700,
    width: "50%",
    borderRight: "1px solid #e5e7eb",
  },
  [`&.${tableCellClasses.body}`]: {
    fontSize: 14,
    width: "50%",
  },
}));

const StyledTableRow = styled(TableRow)(({ theme }) => ({
  "&:nth-of-type(odd)": {
    backgroundColor: theme.palette.action.hover,
  },
  // hide last border
  "&:last-child td, &:last-child th": {
    border: 0,
    border: "1px solid gray",
  },
}));
