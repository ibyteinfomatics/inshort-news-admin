import Head from "next/head";
import SideBar from "../../../components/side-bar/SideBar";
import DashboardHeader from "../../../components/header/DashboardHeader";
import { useEffect, useState } from "react";
import FilterTopHeader from "../../../components/header/FilterTopHeader";
import { useDispatch, useSelector } from "react-redux";
import { useRouter } from "next/router";
import { userService } from "../../../services";
import { setAllJobs } from "../../../reducers/job-reducer";
import ReactPaginate from "react-paginate";

export default function latest() {
  const [option, setOption] = useState({ createdAt: -1 });
  const [search, setSearch] = useState("");
  const [limit, setLimit] = useState(10);
  const [pageNo, setPageNo] = useState(1);
  const [showAction, setShowAction] = useState(false);
  const [showId, setShowId] = useState(null);
  const [customer, setCustomer] = useState([]);
  const [customerSelected, setCustomerSelected] = useState({
    label: "Customer",
    value: "",
  });
  const [filter, setFilter] = useState({});
  const [fromDate, setFromDate] = useState(null);
  const [toDate, setToDate] = useState(null);
  const dispatch = useDispatch();
  const router = useRouter();
  const [statusSelect, setStatusSelect] = useState({ label: "All", value: "" });

  const status = [
    { label: "All", value: "" },
    { label: "Pending Jobs", value: "pending" },
    { label: "Ongoing Jobs", value: "on_going" },
    { label: "Completed Jobs", value: "completed" },
  ];
  const { allJobs } = useSelector((state) => state.jobs);
  useEffect(() => {
    getAllCustomer();
  }, []);
  useEffect(() => {
    setPageNo(1);
    getAllJobs(1, limit, search, option, filter);
  }, [filter]);
  useEffect(() => {
    getAllJobs(pageNo, limit, search, option, filter);
  }, [limit, pageNo, option, search]);

  const getAllJobs = async (pageNo, limit, search, op, filter) => {
    const response = await userService.getAllJob(
      pageNo,
      limit,
      search,
      op,
      filter
    );
    await dispatch(setAllJobs(response));
  };

  const getAllCustomer = async (search) => {
    try {
      const { customers } = await userService.getAllCustomers(search);
      setCustomer(customers);
    } catch (error) {
      console.log("er", error);
    }
  };

  const changePageHandler = ({ selected }) => {
    setPageNo(Number(selected) + 1);
  };

  const dateRangePicker = (e) => {
    if (e.target.name == "from") {
      setFromDate(e.target.value);
      setFilter({ ...filter, [e.target.name]: e.target.value });
    } else {
      setToDate(e.target.value);
      setFilter({ ...filter, [e.target.name]: e.target.value });
    }
  };

  const searchHandler = (e) => {
    setSearch(e.target.value);
    setPageNo(1);
  };
  const handleCustomerSearch = (e) => {
    getAllCustomer(e);
  };
  const handleCustomerSelect = (e) => {
    setCustomerSelected(e);
    setFilter({ ...filter, customer_id: e.value });
  };
  const handleClear = () => {
    setFilter({});
    setFromDate("");
    setToDate("");
    setCustomerSelected({ label: "Customer", value: "" });
    setStatusSelect({ label: "All", value: "" });
  };
  const handelStatusSelect = (e) => {
    setStatusSelect(e);
    if (e.value != "") {
      setFilter({ ...filter, job_status: e.value });
    } else {
      const temp = filter;
      delete temp.job_status;
      setFilter({ ...temp });
    }
  };
  return (
    <>
      <Head>
        <title>All Jobs</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.png' />
      </Head>
      <SideBar />
      <div className='dashboard sideBarOpen'>
        <DashboardHeader message='Job List' />
        <div className='contentWrapper'>
          <div className='dashboard_content newLayout'>
            <FilterTopHeader
              status={status}
              user={customer}
              userName='Customer'
              selectedUser={customerSelected}
              handelUserSearch={handleCustomerSearch}
              handelUserSelect={handleCustomerSelect}
              handleSearch={searchHandler}
              filter={filter}
              clearFilter={handleClear}
              dateRangePicker={dateRangePicker}
              fromDate={fromDate}
              toDate={toDate}
              handelStatusSelect={handelStatusSelect}
              selectedStatus={statusSelect}
              statusname='Job Types'
            />
            <div className='table--layout'>
              <table>
                <thead>
                  <tr>
                    <th>Sr.</th>
                    <th
                      className={
                        option["pick_up.name"] === 1
                          ? "desc"
                          : option["pick_up.name"] === -1
                          ? "asc"
                          : ""
                      }
                      onClick={() => {
                        setOption({
                          ["pick_up.name"]:
                            option["pick_up.name"] == 1 ? -1 : 1,
                        });
                      }}
                    >
                      Customer Name
                    </th>
                    <th
                      className={
                        option["pick_up.address"] === 1
                          ? "desc"
                          : option["pick_up.address"] === -1
                          ? "asc"
                          : ""
                      }
                      onClick={() => {
                        setOption({
                          ["pick_up.address"]:
                            option["pick_up.address"] == 1 ? -1 : 1,
                        });
                      }}
                    >
                      Pickup Address
                    </th>
                    <th
                      className={
                        option["pick_up.mobile"] === 1
                          ? "desc"
                          : option["pick_up.mobile"] === -1
                          ? "asc"
                          : ""
                      }
                      onClick={() => {
                        setOption({
                          ["pick_up.mobile"]:
                            option["pick_up.mobile"] == 1 ? -1 : 1,
                        });
                      }}
                    >
                      Mobile
                    </th>
                    <th
                      className={
                        option["delivery.address"] === 1
                          ? "desc"
                          : option["delivery.address"] === -1
                          ? "asc"
                          : ""
                      }
                      onClick={() => {
                        setOption({
                          ["delivery.address"]:
                            option["delivery.address"] == 1 ? -1 : 1,
                        });
                      }}
                    >
                      Delivery Address
                    </th>

                    <th
                      className={
                        option.delivery_date === 1
                          ? "desc"
                          : option.delivery_date === -1
                          ? "asc"
                          : ""
                      }
                      onClick={() => {
                        setOption({
                          delivery_date: option.delivery_date == 1 ? -1 : 1,
                        });
                      }}
                    >
                      Delivery Date
                    </th>
                    <th
                      className={
                        option.job_status === 1
                          ? "desc"
                          : option.job_status === -1
                          ? "asc"
                          : ""
                      }
                      onClick={() => {
                        setOption({
                          job_status: option.job_status == 1 ? -1 : 1,
                        });
                      }}
                    >
                      Status{" "}
                    </th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {allJobs?.jobs?.length > 0 ? (
                    allJobs?.jobs?.map((item, i) => {
                      return (
                        <tr key={1 + i + (allJobs?.page - 1) * allJobs?.limit}>
                          <td>
                            {1 + i + (allJobs?.page - 1) * allJobs?.limit}
                          </td>
                          <td>{item?.pick_up?.name}</td>
                          <td>{item?.pick_up?.address}</td>
                          <td>{item?.pick_up?.mobile}</td>

                          <td>
                            {item?.delivery?.address ||
                              item?.delivery?.areas?.map((item) => (
                                <span>{item?.city}</span>
                              ))}
                          </td>

                          <td>
                            {new Date(item?.delivery_date).toDateString()}
                          </td>

                          <td>
                            <span className='label label-roles first-caps'>
                              {item?.job_status}
                            </span>
                          </td>
                          <td>
                            <span
                              className='three--vertical--dots'
                              onClick={() => {
                                setShowAction(!showAction);
                                setShowId(item?._id);
                              }}
                            >
                              <span></span>
                              <span></span>
                              <span></span>
                            </span>
                            {showId === item?._id && showAction && (
                              <span className='tableActions'>
                                <ul>
                                  <li
                                    onClick={() =>
                                      router.push(`/admin/jobs/${showId}`)
                                    }
                                  >
                                    <a className='view__lock'>View </a>
                                  </li>
                                  <li
                                    onClick={() => {
                                      router.push(
                                        `/admin/jobs/update/${showId}`
                                      );
                                    }}
                                  >
                                    <a className='edit__detail'>Edit </a>
                                  </li>
                                </ul>
                              </span>
                            )}
                          </td>
                        </tr>
                      );
                    })
                  ) : (
                    <tr></tr>
                  )}
                </tbody>
              </table>
              <div className='paginationView'>
                <div className='dataList'>
                  {allJobs?.total > 0 && (
                    <p>
                      Showing {(pageNo - 1) * 10 + 1} to{" "}
                      {pageNo * 10 > allJobs?.total
                        ? allJobs?.total
                        : pageNo * 10}{" "}
                      of {allJobs?.total} entries
                    </p>
                  )}
                </div>
                <ReactPaginate
                  breakLabel='...'
                  nextLabel='Next'
                  onPageChange={changePageHandler}
                  pageRangeDisplayed={2}
                  pageCount={allJobs?.pages ?? 0}
                  previousLabel='Previous'
                  renderOnZeroPageCount={null}
                  className='pagination'
                  nextClassName='page'
                  previousClassName='page'
                  pageClassName='page'
                  activeClassName='active-page'
                  forcePage={pageNo - 1}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
